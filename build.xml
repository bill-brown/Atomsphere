<?xml version="1.0"?>
<!--

    Copyright (C) 2009 William R. Brown <info@colorfulsoftware.com>

    This program is free software; you can redistribute it and/or
    modify it under the terms of the GNU General Public License
    as published by the Free Software Foundation; either version 2
    of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

-->
<!-- 2005-12-06 wbrown - first copy of clean-room build. -->
<project name="mediafeed" basedir="." default="local-war-package">

	<property name="workspace.path" 		value="C:/dev" />
	<property name="base.path" 		value="C:/dev/mediafeedRemote" />

	<property name="app.name"		value="mediafeed" />
	<property name="root"			value="${base.path}/${app.name}" />
	<property name="build.dir"      value="${root}/WEB-INF/classes" />
	<property name="src.dir"        value="${base.path}/source" />
	<property name="properties.dir" value="${base.path}/properties" />
	<property name="web.dir"        value="${root}" />
	<property name="javadoc.dir"    value="${root}/doc" />
	<property name="svnant.version" value="1.1" />
	<property name="svn.repository" value="http://svn/repos" />
	<property name="svn.root" value="itdev" />
	<property name="svn.root.app.name"       value="mediafeed" />
	<property name="svnant.trunk.url" value="${svn.repository}/${svn.root}/${svn.root.app.name}/trunk/" />
	<property name="svnant.tags.url" value="${svn.repository}/${svn.root}/${svn.root.app.name}/tags/"/>
	<property name="weblib.dir"        value="${root}/WEB-INF/lib"/>
	<property name="builds.lib"	value="C:/builds/lib" />
	<property name="builds.home" value="${workspace.path}/builds/mediafeed" />
	<!--  all properties are in build.properties  -->

	 <!-- Build working classpath -->
	<property file="build.properties" />
	<path id="project.classpath">
		<pathelement location="${builds.lib}/servlet-api.jar" />
		<pathelement location="${weblib.dir}/xmlpublic.jar" />
		<pathelement location="${weblib.dir}/natom-1.0.jar" />
		<pathelement location="${weblib.dir}/jsr173_1.0_api.jar" />
		<pathelement location="${weblib.dir}/xbean_xpath.jar" />
		<pathelement location="${weblib.dir}/xbean.jar" />
	</path>

	<taskdef resource="svntask.properties" classpathref="project.classpath"/>

 
	<property name="localBuildRoot" value="${root}"/>

	<!-- remove the local soruce folders -->
	<target name="cleanCheckout">
		<delete dir="src"/>
		<delete dir="mediafeed"/>
	</target>

	<!-- checkout from the trunk to the src folder -->
	<target name="checkout" depends="cleanCheckout">
		<svn username="${svnuser}" password="${svnpasswd}" javahl="true">
			<checkout url="${svnant.trunk.url}" destPath="src" />
		</svn>
	</target>

	<!-- update the build number -->
	<target name="incrementBuildNumber" depends="checkout">
		<propertyfile comment="version numbers" file="src/source/version.properties">
			<entry default="0" key="build" operation="+" type="int"/>
		</propertyfile>

		<svn  username="${svnuser}" password="${svnpasswd}" javahl="false">
			<commit file="src/source/version.properties" message="[mediafeed] - clean room build number automatically incremented by ant"/>
		</svn>
	</target>

	<!-- make a tag snapshot of the trunk into the tags folder --> 
	<target name="copyTrunkToTag" depends="cleanCheckout,checkout,incrementBuildNumber">
		<property file="src/source/version.properties"/>
		<svn  username="${svnuser}" password="${svnpasswd}" javahl="false">
			<copy message="[mediafeed] - clean room build copyTrunkToTag" srcURL="${svnant.trunk.url}" destURL="${svnant.tags.url}${app.name}_${major}.${minor}.${feature}.${build}"/>
		</svn>
		<property id="" name="tag" value="${app.name}_${major}.${minor}.${feature}.${build}"/>
	</target>

	<!-- check out the tag locally -->
	<target name="checkoutTag" depends="copyTrunkToTag">
		<svn username="${svnuser}" password="${svnpasswd}" javahl="false">
			<checkout url="${svnant.tags.url}${tag}" destPath="${tag}" />
		</svn>
	</target>

	<!-- move the tag source to the appname source folder -->
	<target name="export" depends="checkoutTag">
		<svn>
			<export srcPath="${tag}" destPath="${app.name}"/>
		</svn>
	</target>
	
	<!-- remove local folders -->
	<target name="cleanExport">
		<delete dir="${tag}"/>
		<delete dir="src"/>
	</target>

	<!-- the compile target -->
	<target name="compile" depends="export">
		<mkdir dir="${builds.home}/mediafeed/mediafeed/WEB-INF/classes"/>
		<javac srcdir="${builds.home}/mediafeed/source" destdir="${builds.home}/mediafeed/mediafeed/WEB-INF/classes" >
			<classpath refid="project.classpath"/>
			<include name="**/*.java"/>
		</javac>
		<copy todir="${builds.home}/${app.name}/mediafeed/WEB-INF/classes">
			<fileset dir="${builds.home}/${app.name}/source/">
				<include name="**/*.properties*" />
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>

	<!-- builds the war files -->
	<target name="package">
		<touch file="${builds.home}/${app.name}/mediafeed/${tag}"/>
		<!-- development war file -->
		<copy overwrite="true" todir="${builds.home}/${app.name}/mediafeed/WEB-INF/classes/">
			<fileset dir="${builds.home}/${app.name}/properties/development" includes="*.properties"/>
		</copy>		
		<jar basedir="${builds.home}/${app.name}/mediafeed" destfile="${tag}-development.war"/>
	       
		<!-- staging war file-->
		<copy overwrite="true" todir="${builds.home}/${app.name}/mediafeed/WEB-INF/classes/">
			<fileset dir="${builds.home}/${app.name}/properties/staging" includes="*.properties"/>
		</copy>
		<jar basedir="${builds.home}/${app.name}/mediafeed" destfile="${tag}-staging.war"/>

		<!-- production war file -->
		<copy overwrite="true" todir="${builds.home}/${app.name}/mediafeed/WEB-INF/classes/">
			<fileset dir="${builds.home}/${app.name}/properties/production" includes="*.properties"/>
		</copy>		
		<jar basedir="${builds.home}/${app.name}/mediafeed" destfile="${tag}-production.war"/>
	
       	<delete dir="${builds.home}/${app.name}"/> 
	</target>


	<target name="buildTrunk" depends="copyTrunkToTag,cleanCheckout,checkoutTag,export,compile,package,cleanExport"/>

	<!-- In order to use this set of tags, you need to pass in a tag property on the command line, thusly:	ant buildTag -Dtag=vmi_1.1.0.1 -->
	<target name="buildTag" depends="checkoutTag,export,compile,package"/>

	<!-- checkout a tag from the repository to the local tag directory-->
	<target name="checkoutNamedTag">
		<svn username="${svnuser}" password="${svnpasswd}" javahl="false">
			<checkout url="${svnant.tags.url}${tag}" destPath="${tag}" />
		</svn>
	</target>

	<target name="exportNamedTag" depends="checkoutNamedTag">
		<svn>
			<export srcPath="${tag}" destPath="${root}"/>
		</svn>
		<delete dir="${tag}"/>
		<delete dir="src"/>
	</target>



	<!-- =================================================================== -->
	<!-- Compile package                                                     -->
	<!-- =================================================================== -->
	<target name="localCompile">
		<javac srcdir="${base.path}/source" destdir="${build.dir}" >
			<classpath refid="project.classpath"/>
			<include name="**/*.java"/>
		</javac>
	</target>

	<!-- =================================================================== -->
	<!-- Prepares the Distribution to be deployed or WARed                   -->
	<!-- =================================================================== -->
	<target name="localDist" depends="localCompile">
		<copy todir="${web.dir}/WEB-INF">
			<fileset dir="${web.dir}/WEB-INF">
				<include name="**/*.tld" />
				<include name="**/*.xml" />
			</fileset>
		</copy>
		<!-- copy quartz.properties to the dist classes directory -->
		<copy todir="${build.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.properties" />
			</fileset>
		</copy>

	</target>

	<!-- =================================================================== -->
	<!-- Packages the distribution to a WAR                                  -->
	<!-- =================================================================== -->

	<target name="local-war-package" depends="localDist" description="Create war file">
		<copy todir="${base.path}/${app.name}/WEB-INF/classes" overwrite="true">
			<fileset dir="${properties.dir}" includes="*.properties"/>
		</copy>

		<delete file="${base.path}/${app.name}.war"/>
				<war destfile="${base.path}/${app.name}.war" webxml="${properties.dir}/${app.name}.web.xml"
					basedir="${base.path}/${app.name}" 
					update="true"/>
		</target>


</project>